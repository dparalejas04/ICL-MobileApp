// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: e3ViewYvztDa9TzbxJa8p5
// Component: Us73fwzZ5rF2
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantst2LdbTgtBhCe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: t2ldb_TGTBhCe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_icl_mobile_app.module.css"; // plasmic-import: e3ViewYvztDa9TzbxJa8p5/projectcss
import sty from "./PlasmicLoginpage.module.css"; // plasmic-import: Us73fwzZ5rF2/css

import RectangleIcon from "./icons/PlasmicIcon__Rectangle"; // plasmic-import: UONN3UL-uo/icon
import CombinedShapeIcon from "./icons/PlasmicIcon__CombinedShape"; // plasmic-import: AJySRDgPsS/icon
import WiFiIcon from "./icons/PlasmicIcon__WiFi"; // plasmic-import: Yckalna_0K/icon
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: Nt8neZKXZd/icon
import Line112Icon from "./icons/PlasmicIcon__Line112"; // plasmic-import: QxZiYMRz9t/icon

export type PlasmicLoginpage__VariantMembers = {};
export type PlasmicLoginpage__VariantsArgs = {};
type VariantPropType = keyof PlasmicLoginpage__VariantsArgs;
export const PlasmicLoginpage__VariantProps = new Array<VariantPropType>();

export type PlasmicLoginpage__ArgsType = {};
type ArgPropType = keyof PlasmicLoginpage__ArgsType;
export const PlasmicLoginpage__ArgProps = new Array<ArgPropType>();

export type PlasmicLoginpage__OverridesType = {
  root?: p.Flex<"div">;
  login?: p.Flex<"div">;
  statusBar?: p.Flex<"div">;
  symbols?: p.Flex<"div">;
  battery?: p.Flex<"div">;
  rectangle?: p.Flex<"div">;
  barsStatusTime?: p.Flex<"div">;
  time?: p.Flex<"div">;
  frame4?: p.Flex<"div">;
  intercardlogologin?: p.Flex<"div">;
  intlite?: p.Flex<"div">;
  rectangle83?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  username?: p.Flex<"div">;
  textbox?: p.Flex<"div">;
  rectangle57?: p.Flex<"div">;
  password?: p.Flex<"div">;
  textbox2?: p.Flex<"div">;
  rectangle58?: p.Flex<"div">;
  forgotPassword?: p.Flex<"div">;
  loginButton?: p.Flex<"a">;
  group193?: p.Flex<"a">;
  loginButton2?: p.Flex<"div">;
  primary?: p.Flex<"label">;
  rectangle79?: p.Flex<"div">;
  footerIntercardWhite?: p.Flex<"div">;
  footer?: p.Flex<"div">;
  rectangle80?: p.Flex<"div">;
  group384?: p.Flex<"div">;
};

export interface DefaultLoginpageProps {
  className?: string;
}

function PlasmicLoginpage__RenderFunc(props: {
  variants: PlasmicLoginpage__VariantsArgs;
  args: PlasmicLoginpage__ArgsType;
  overrides: PlasmicLoginpage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantst2LdbTgtBhCe()
  });

  return (
    <React.Fragment>
      {}

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root
        )}
      >
        {(hasVariant(globalVariants, "screen", "android") ? true : false) ? (
          <div
            data-plasmic-name={"login"}
            data-plasmic-override={overrides.login}
            className={classNames(projectcss.all, sty.login)}
          >
            <div
              data-plasmic-name={"statusBar"}
              data-plasmic-override={overrides.statusBar}
              className={classNames(projectcss.all, sty.statusBar)}
            >
              <div
                data-plasmic-name={"symbols"}
                data-plasmic-override={overrides.symbols}
                className={classNames(projectcss.all, sty.symbols)}
              >
                <div
                  data-plasmic-name={"battery"}
                  data-plasmic-override={overrides.battery}
                  className={classNames(projectcss.all, sty.battery)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "android")
                      ? true
                      : true
                  ) ? (
                    <RectangleIcon
                      className={classNames(projectcss.all, sty.svg___77M6U)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    data-plasmic-name={"rectangle"}
                    data-plasmic-override={overrides.rectangle}
                    className={classNames(projectcss.all, sty.rectangle)}
                  />
                </div>

                {(
                  hasVariant(globalVariants, "screen", "android") ? true : true
                ) ? (
                  <CombinedShapeIcon
                    className={classNames(projectcss.all, sty.svg__zw77T)}
                    role={"img"}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "android") ? true : true
                ) ? (
                  <WiFiIcon
                    className={classNames(projectcss.all, sty.svg__y5Aio)}
                    role={"img"}
                  />
                ) : null}
              </div>

              <div
                data-plasmic-name={"barsStatusTime"}
                data-plasmic-override={overrides.barsStatusTime}
                className={classNames(projectcss.all, sty.barsStatusTime)}
              >
                <div
                  data-plasmic-name={"time"}
                  data-plasmic-override={overrides.time}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.time
                  )}
                >
                  {"9:41"}
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"frame4"}
              data-plasmic-override={overrides.frame4}
              className={classNames(projectcss.all, sty.frame4)}
            >
              <div
                data-plasmic-name={"intercardlogologin"}
                data-plasmic-override={overrides.intercardlogologin}
                className={classNames(projectcss.all, sty.intercardlogologin)}
              />
            </div>

            <div
              data-plasmic-name={"intlite"}
              data-plasmic-override={overrides.intlite}
              className={classNames(projectcss.all, sty.intlite)}
            >
              <div
                data-plasmic-name={"rectangle83"}
                data-plasmic-override={overrides.rectangle83}
                className={classNames(projectcss.all, sty.rectangle83)}
              />

              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {"intercard lite"}
              </h2>
            </div>

            <div
              data-plasmic-name={"username"}
              data-plasmic-override={overrides.username}
              className={classNames(projectcss.all, sty.username)}
            >
              <div
                data-plasmic-name={"textbox"}
                data-plasmic-override={overrides.textbox}
                className={classNames(projectcss.all, sty.textbox)}
              >
                <div
                  data-plasmic-name={"rectangle57"}
                  data-plasmic-override={overrides.rectangle57}
                  className={classNames(projectcss.all, sty.rectangle57)}
                >
                  <textarea
                    className={classNames(
                      projectcss.all,
                      projectcss.textarea,
                      projectcss.__wab_text,
                      sty.textarea__gStCh
                    )}
                    placeholder={"Enter Username" as const}
                  >
                    {"Enter Username"}
                  </textarea>
                </div>
              </div>

              <label
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.label__opg1
                )}
              >
                {"Username"}
              </label>
            </div>

            <div
              data-plasmic-name={"password"}
              data-plasmic-override={overrides.password}
              className={classNames(projectcss.all, sty.password)}
            >
              <div
                data-plasmic-name={"textbox2"}
                data-plasmic-override={overrides.textbox2}
                className={classNames(projectcss.all, sty.textbox2)}
              >
                <div
                  data-plasmic-name={"rectangle58"}
                  data-plasmic-override={overrides.rectangle58}
                  className={classNames(projectcss.all, sty.rectangle58)}
                >
                  <textarea
                    className={classNames(
                      projectcss.all,
                      projectcss.textarea,
                      projectcss.__wab_text,
                      sty.textarea__xsdTu
                    )}
                    placeholder={"Enter Password" as const}
                  >
                    {"Enter Password"}
                  </textarea>
                </div>
              </div>

              <label
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.label__vIlnF
                )}
              >
                {"Password"}
              </label>
            </div>

            <div
              data-plasmic-name={"forgotPassword"}
              data-plasmic-override={overrides.forgotPassword}
              className={classNames(projectcss.all, sty.forgotPassword)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2KbPg
                )}
              >
                {"Forget Password?"}
              </div>
            </div>

            <a
              data-plasmic-name={"loginButton"}
              data-plasmic-override={overrides.loginButton}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.loginButton
              )}
              href={`/new-page`}
            >
              <a
                data-plasmic-name={"group193"}
                data-plasmic-override={overrides.group193}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.group193,
                  "login" as const
                )}
              >
                <div
                  data-plasmic-name={"loginButton2"}
                  data-plasmic-override={overrides.loginButton2}
                  className={classNames(projectcss.all, sty.loginButton2)}
                />

                <label
                  data-plasmic-name={"primary"}
                  data-plasmic-override={overrides.primary}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.primary
                  )}
                >
                  {"LOGIN"}
                </label>
              </a>
            </a>

            <div
              data-plasmic-name={"rectangle79"}
              data-plasmic-override={overrides.rectangle79}
              className={classNames(projectcss.all, sty.rectangle79)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4T91Z
              )}
            >
              {"Online Web Reports"}
            </div>

            <div
              data-plasmic-name={"footerIntercardWhite"}
              data-plasmic-override={overrides.footerIntercardWhite}
              className={classNames(projectcss.all, sty.footerIntercardWhite)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9Dyx3
                )}
              >
                {"Powered By Intercard Inc."}
              </div>

              {(
                hasVariant(globalVariants, "screen", "android") ? true : true
              ) ? (
                <VectorIcon
                  className={classNames(projectcss.all, sty.svg___8UgIp)}
                  role={"img"}
                />
              ) : null}
            </div>

            <div
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames(projectcss.all, sty.footer)}
            >
              <div
                data-plasmic-name={"rectangle80"}
                data-plasmic-override={overrides.rectangle80}
                className={classNames(projectcss.all, sty.rectangle80)}
              />

              <div
                data-plasmic-name={"group384"}
                data-plasmic-override={overrides.group384}
                className={classNames(projectcss.all, sty.group384)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1Vl0
                  )}
                >
                  {"Online Web Reports"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tm2Fe
                  )}
                >
                  {"Powered By Intercard Inc."}
                </div>

                {(
                  hasVariant(globalVariants, "screen", "android") ? true : true
                ) ? (
                  <VectorIcon
                    className={classNames(projectcss.all, sty.svg___1Q6Ia)}
                    role={"img"}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "android") ? true : true
                ) ? (
                  <Line112Icon
                    className={classNames(projectcss.all, sty.svg__ktpeu)}
                    role={"img"}
                  />
                ) : null}
              </div>
            </div>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "login",
    "statusBar",
    "symbols",
    "battery",
    "rectangle",
    "barsStatusTime",
    "time",
    "frame4",
    "intercardlogologin",
    "intlite",
    "rectangle83",
    "h2",
    "username",
    "textbox",
    "rectangle57",
    "password",
    "textbox2",
    "rectangle58",
    "forgotPassword",
    "loginButton",
    "group193",
    "loginButton2",
    "primary",
    "rectangle79",
    "footerIntercardWhite",
    "footer",
    "rectangle80",
    "group384"
  ],
  login: [
    "login",
    "statusBar",
    "symbols",
    "battery",
    "rectangle",
    "barsStatusTime",
    "time",
    "frame4",
    "intercardlogologin",
    "intlite",
    "rectangle83",
    "h2",
    "username",
    "textbox",
    "rectangle57",
    "password",
    "textbox2",
    "rectangle58",
    "forgotPassword",
    "loginButton",
    "group193",
    "loginButton2",
    "primary",
    "rectangle79",
    "footerIntercardWhite",
    "footer",
    "rectangle80",
    "group384"
  ],
  statusBar: [
    "statusBar",
    "symbols",
    "battery",
    "rectangle",
    "barsStatusTime",
    "time"
  ],
  symbols: ["symbols", "battery", "rectangle"],
  battery: ["battery", "rectangle"],
  rectangle: ["rectangle"],
  barsStatusTime: ["barsStatusTime", "time"],
  time: ["time"],
  frame4: ["frame4", "intercardlogologin"],
  intercardlogologin: ["intercardlogologin"],
  intlite: ["intlite", "rectangle83", "h2"],
  rectangle83: ["rectangle83"],
  h2: ["h2"],
  username: ["username", "textbox", "rectangle57"],
  textbox: ["textbox", "rectangle57"],
  rectangle57: ["rectangle57"],
  password: ["password", "textbox2", "rectangle58"],
  textbox2: ["textbox2", "rectangle58"],
  rectangle58: ["rectangle58"],
  forgotPassword: ["forgotPassword"],
  loginButton: ["loginButton", "group193", "loginButton2", "primary"],
  group193: ["group193", "loginButton2", "primary"],
  loginButton2: ["loginButton2"],
  primary: ["primary"],
  rectangle79: ["rectangle79"],
  footerIntercardWhite: ["footerIntercardWhite"],
  footer: ["footer", "rectangle80", "group384"],
  rectangle80: ["rectangle80"],
  group384: ["group384"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  login: "div";
  statusBar: "div";
  symbols: "div";
  battery: "div";
  rectangle: "div";
  barsStatusTime: "div";
  time: "div";
  frame4: "div";
  intercardlogologin: "div";
  intlite: "div";
  rectangle83: "div";
  h2: "h2";
  username: "div";
  textbox: "div";
  rectangle57: "div";
  password: "div";
  textbox2: "div";
  rectangle58: "div";
  forgotPassword: "div";
  loginButton: "a";
  group193: "a";
  loginButton2: "div";
  primary: "label";
  rectangle79: "div";
  footerIntercardWhite: "div";
  footer: "div";
  rectangle80: "div";
  group384: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginpage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginpage__VariantsArgs;
    args?: PlasmicLoginpage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginpage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLoginpage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLoginpage__ArgProps,
          internalVariantPropNames: PlasmicLoginpage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLoginpage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginpage";
  } else {
    func.displayName = `PlasmicLoginpage.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginpage = Object.assign(
  // Top-level PlasmicLoginpage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    login: makeNodeComponent("login"),
    statusBar: makeNodeComponent("statusBar"),
    symbols: makeNodeComponent("symbols"),
    battery: makeNodeComponent("battery"),
    rectangle: makeNodeComponent("rectangle"),
    barsStatusTime: makeNodeComponent("barsStatusTime"),
    time: makeNodeComponent("time"),
    frame4: makeNodeComponent("frame4"),
    intercardlogologin: makeNodeComponent("intercardlogologin"),
    intlite: makeNodeComponent("intlite"),
    rectangle83: makeNodeComponent("rectangle83"),
    h2: makeNodeComponent("h2"),
    username: makeNodeComponent("username"),
    textbox: makeNodeComponent("textbox"),
    rectangle57: makeNodeComponent("rectangle57"),
    password: makeNodeComponent("password"),
    textbox2: makeNodeComponent("textbox2"),
    rectangle58: makeNodeComponent("rectangle58"),
    forgotPassword: makeNodeComponent("forgotPassword"),
    loginButton: makeNodeComponent("loginButton"),
    group193: makeNodeComponent("group193"),
    loginButton2: makeNodeComponent("loginButton2"),
    primary: makeNodeComponent("primary"),
    rectangle79: makeNodeComponent("rectangle79"),
    footerIntercardWhite: makeNodeComponent("footerIntercardWhite"),
    footer: makeNodeComponent("footer"),
    rectangle80: makeNodeComponent("rectangle80"),
    group384: makeNodeComponent("group384"),

    // Metadata about props expected for PlasmicLoginpage
    internalVariantProps: PlasmicLoginpage__VariantProps,
    internalArgProps: PlasmicLoginpage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLoginpage;
/* prettier-ignore-end */
